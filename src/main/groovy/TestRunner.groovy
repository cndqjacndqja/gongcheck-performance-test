import groovy.json.JsonSlurper
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is
import static org.junit.Assert.assertThat

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test1
    public static GTest test2
    public static GTest test3
    public static GTest test4
    public static GTest test5
    public static GTest test6
    public static HTTPRequest request
    public static Map<String, Object> params = [:]
    public static Map<String, String> headers = [:]
    public static String body = "{\n    \"password\" : \"1234\"\n}"
    public static List<Cookie> cookies = []

    @BeforeProcess
    public static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)
        test1 = new GTest(1, "POST api/hosts/1/enter")
        test2 = new GTest(2, "GET /api/spaces")
        test3 = new GTest(3, "3")
        test4 = new GTest(4, "4")
        test5 = new GTest(5, "5")
        test6 = new GTest(6, "6")
        request = new HTTPRequest()

        // Set header data
        headers.put("Content-Type", "application/json")

        grinder.logger.info("before process.")
    }

    @BeforeThread
    public void beforeThread() {
        test1.record(this, "test1")
        test2.record(this, "test2")
        test3.record(this, "test2")
        test4.record(this, "test2")
        test5.record(this, "test2")
        test6.record(this, "test2")

        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        CookieManager.addCookies(cookies)
        grinder.logger.info("before. init headers and cookies")
    }

    private String accessToken

    @Test
    public void test1() {
        request.setHeaders(headers)

        HTTPResponse response = request.POST("http://127.0.0.1:8080/api/hosts/1/enter", body.getBytes())
        def slurper = new JsonSlurper()
        def toJSON = { slurper.parseText(it) }
        def result = response.getBody(toJSON);
        accessToken = result.token
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
    }

    @Test
    public void test2() {
        String token = "Bearer " + accessToken
        headers.put("Authorization", token)
        request.setHeaders(headers)
        HTTPResponse response = request.GET("http://127.0.0.1:8080/api/spaces")

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
    }

    @Test
    public void test3() {
        String token = "Bearer " + accessToken
        headers.put("Authorization", token)
        request.setHeaders(headers)
        HTTPResponse response = request.GET("http://127.0.0.1:8080/api/spaces/1/jobs")
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
        println 'test3 완료'
    }
    private boolean active
    @Test
    public void test4() {
        String token = "Bearer " + accessToken
        headers.put("Authorization", token)
        request.setHeaders(headers)
        HTTPResponse response = request.GET("http://127.0.0.1:8080/api/jobs/1/active")
        def slurper = new JsonSlurper()
        def toJSON = { slurper.parseText(it) }
        def result = response.getBody(toJSON);
        active = result.active
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
        println 'test4 완료'
    }

    @Test
    public void test5() {
        String token = "Bearer " + accessToken
        headers.put("Authorization", token)
        request.setHeaders(headers)
        HTTPResponse response
        if (active) {
            response = request.GET("http://127.0.0.1:8080/api/jobs/1/runningTasks")
            assertThat(response.statusCode, is(200))
        } else {
            response = request.POST("http://127.0.0.1:8080/api/jobs/1/runningTasks/new")
            assertThat(response.statusCode, is(201))
        }
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        }
        println 'test5 완료'
    }

    @Test
    public void test6() {
        String token = "Bearer " + accessToken
        headers.put("Authorization", token)
        request.setHeaders(headers)
        HTTPResponse response
        response = request.POST("http://127.0.0.1:8080/api/tasks/1/flip")
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
        println 'test6 완료'
    }
}
